 ¿Qué es ECMAScript?
ECMAScript (ES) es un estándar de lenguaje de programación creado por ECMA International, que define cómo debe funcionar JavaScript.
Especifica la sintaxis, tipos, estructuras, manejo de errores, objetos, y más.

Fue creado para unificar el comportamiento de JavaScript entre diferentes navegadores.

Cada navegador implementa este estándar a través de su motor de JavaScript (por ejemplo, V8 en Chrome).

ECMAScript no es un lenguaje por sí mismo, pero JavaScript es su implementación más popular.

🧭 ¿Cómo utilizar ECMAScript?
No necesitas hacer nada especial para "usar ECMAScript", ya que todo código JavaScript moderno sigue alguna versión de ECMAScript.

Sin embargo, para utilizar nuevas funcionalidades:

Asegúrate de que el navegador o entorno de ejecución (Node.js) soporta la versión ECMAScript correspondiente.

Puedes usar herramientas como Babel o TypeScript para transpilar código moderno a versiones anteriores compatibles.

📅 Versiones de ECMAScript y sus funcionalidades clave
A continuación, un resumen de las versiones más importantes de ECMAScript, sus características clave y ejemplos de código:

🌟 ECMAScript 1 (1997) - Versión inicial
Primera versión estándar.

Soporte básico para variables, tipos, funciones, etc.

⚠️ Hoy en día, esta versión es solo histórica.

🚀 ECMAScript 5 (2009)
Características importantes:

strict mode

Métodos de Array como forEach, map, filter

Object.create()
🧠 ECMAScript 6 / ES2015 (2015)
Una de las actualizaciones más grandes.

Características clave:

let y const

Funciones flecha

Clases

Template literals

Módulos (import / export)

Promesas

Destructuración

Parámetros por defecto

Operador spread

Ejemplo: (imagen)

⚙️ ECMAScript 2016 (ES7)
Características:

Array.prototype.includes()

Operador de exponenciación **

Ejemplo:(imagen)

🔄 ECMAScript 2017 (ES8)
Características:

async/await

Object.entries(), Object.values()

Padding de strings (padStart, padEnd)

Ejemplo:(imagen)

🧩 ECMAScript 2018 (ES9)
Características:

Rest/Spread en objetos

Promise.finally()

Expresiones RegExp mejoradas

Ejemplo:(imagen)

🧵 ECMAScript 2019 (ES10)
Características:

Array.prototype.flat(), flatMap()

Object.fromEntries()

trimStart(), trimEnd()

Ejemplo:(imagen)

📐 ECMAScript 2020 (ES11)
Características:

nullish coalescing operator (??)

optional chaining (?.)

Promise.allSettled()

globalThis

Ejemplo:(imagen)

🧭 ECMAScript 2021 (ES12)
Características:

Logical assignment operators (&&=, ||=, ??=)

String.prototype.replaceAll()

Separadores numéricos (_)

WeakRefs

Ejemplo:(imagen)

📐 ECMAScript 2022 (ES13)
Características:

class campos privados

static bloques

Mejoras en top-level await

Ejemplo:(imagen)

🧪 ECMAScript 2023 (ES14)
Características:

.findLast() y .findLastIndex()

Symbol como claves privadas

Mejoras en Array y TypedArray

Ejemplo:(imagen)

🧭 ECMAScript 2024 (ES15 - Propuesta en proceso)
Características en discusión:

Set methods: union(), intersection(), etc.

Observable como nuevo tipo de dato reactivo.

Pattern Matching (aún en desarrollo)

🧮 Diferencias Notorias entre Versiones
Versión	Cambio Clave	Diferencia Notoria
ES5	strict mode, métodos array	Mejora estructura y errores
ES6	let, const, clases, módulos	Cambio de paradigma moderno
ES8+	async/await	Código asíncrono más limpio
ES10+	Spread, flat, operadores lógicos	Mayor expresividad y legibilidad

✅ Conclusión
ECMAScript es el estándar que define JavaScript.

Cada versión agrega nuevas herramientas para mejorar el desarrollo.

Para usar nuevas versiones: verifica compatibilidad o transpila con herramientas modernas.
