 ¬øQu√© es ECMAScript?
ECMAScript (ES) es un est√°ndar de lenguaje de programaci√≥n creado por ECMA International, que define c√≥mo debe funcionar JavaScript.
Especifica la sintaxis, tipos, estructuras, manejo de errores, objetos, y m√°s.

Fue creado para unificar el comportamiento de JavaScript entre diferentes navegadores.

Cada navegador implementa este est√°ndar a trav√©s de su motor de JavaScript (por ejemplo, V8 en Chrome).

ECMAScript no es un lenguaje por s√≠ mismo, pero JavaScript es su implementaci√≥n m√°s popular.

üß≠ ¬øC√≥mo utilizar ECMAScript?
No necesitas hacer nada especial para "usar ECMAScript", ya que todo c√≥digo JavaScript moderno sigue alguna versi√≥n de ECMAScript.

Sin embargo, para utilizar nuevas funcionalidades:

Aseg√∫rate de que el navegador o entorno de ejecuci√≥n (Node.js) soporta la versi√≥n ECMAScript correspondiente.

Puedes usar herramientas como Babel o TypeScript para transpilar c√≥digo moderno a versiones anteriores compatibles.

üìÖ Versiones de ECMAScript y sus funcionalidades clave
A continuaci√≥n, un resumen de las versiones m√°s importantes de ECMAScript, sus caracter√≠sticas clave y ejemplos de c√≥digo:

üåü ECMAScript 1 (1997) - Versi√≥n inicial
Primera versi√≥n est√°ndar.

Soporte b√°sico para variables, tipos, funciones, etc.

‚ö†Ô∏è Hoy en d√≠a, esta versi√≥n es solo hist√≥rica.

üöÄ ECMAScript 5 (2009)
Caracter√≠sticas importantes:

strict mode

M√©todos de Array como forEach, map, filter

Object.create()
üß† ECMAScript 6 / ES2015 (2015)
Una de las actualizaciones m√°s grandes.

Caracter√≠sticas clave:

let y const

Funciones flecha

Clases

Template literals

M√≥dulos (import / export)

Promesas

Destructuraci√≥n

Par√°metros por defecto

Operador spread

Ejemplo: (imagen)

‚öôÔ∏è ECMAScript 2016 (ES7)
Caracter√≠sticas:

Array.prototype.includes()

Operador de exponenciaci√≥n **

Ejemplo:(imagen)

üîÑ ECMAScript 2017 (ES8)
Caracter√≠sticas:

async/await

Object.entries(), Object.values()

Padding de strings (padStart, padEnd)

Ejemplo:(imagen)

üß© ECMAScript 2018 (ES9)
Caracter√≠sticas:

Rest/Spread en objetos

Promise.finally()

Expresiones RegExp mejoradas

Ejemplo:(imagen)

üßµ ECMAScript 2019 (ES10)
Caracter√≠sticas:

Array.prototype.flat(), flatMap()

Object.fromEntries()

trimStart(), trimEnd()

Ejemplo:(imagen)

üìê ECMAScript 2020 (ES11)
Caracter√≠sticas:

nullish coalescing operator (??)

optional chaining (?.)

Promise.allSettled()

globalThis

Ejemplo:(imagen)

üß≠ ECMAScript 2021 (ES12)
Caracter√≠sticas:

Logical assignment operators (&&=, ||=, ??=)

String.prototype.replaceAll()

Separadores num√©ricos (_)

WeakRefs

Ejemplo:(imagen)

üìê ECMAScript 2022 (ES13)
Caracter√≠sticas:

class campos privados

static bloques

Mejoras en top-level await

Ejemplo:(imagen)

üß™ ECMAScript 2023 (ES14)
Caracter√≠sticas:

.findLast() y .findLastIndex()

Symbol como claves privadas

Mejoras en Array y TypedArray

Ejemplo:(imagen)

üß≠ ECMAScript 2024 (ES15 - Propuesta en proceso)
Caracter√≠sticas en discusi√≥n:

Set methods: union(), intersection(), etc.

Observable como nuevo tipo de dato reactivo.

Pattern Matching (a√∫n en desarrollo)

üßÆ Diferencias Notorias entre Versiones
Versi√≥n	Cambio Clave	Diferencia Notoria
ES5	strict mode, m√©todos array	Mejora estructura y errores
ES6	let, const, clases, m√≥dulos	Cambio de paradigma moderno
ES8+	async/await	C√≥digo as√≠ncrono m√°s limpio
ES10+	Spread, flat, operadores l√≥gicos	Mayor expresividad y legibilidad

‚úÖ Conclusi√≥n
ECMAScript es el est√°ndar que define JavaScript.

Cada versi√≥n agrega nuevas herramientas para mejorar el desarrollo.

Para usar nuevas versiones: verifica compatibilidad o transpila con herramientas modernas.


COD:
<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Diferencias ECMAScript</title>
  <link rel="stylesheet" href="styles.css">
</head>
<body>

  <h1>Diferencias entre versiones de ECMAScript</h1>

  <div class="table-container">
    <table>
      <thead>
        <tr>
          <th>Versi√≥n</th>
          <th>Diferencias principales</th>
        </tr>
      </thead>
      <tbody>
        <tr><td>ES1 (1997)</td><td>Primera versi√≥n oficial. Establece la base del lenguaje JavaScript.</td></tr>
        <tr><td>ES2 (1998)</td><td>Ajustes editoriales para alineaci√≥n con est√°ndares internacionales.</td></tr>
        <tr><td>ES3 (1999)</td><td>Expresiones regulares, manejo de errores con try/catch, mejoras en cadenas y estructuras de control.</td></tr>
        <tr><td>ES4</td><td>Propuesta cancelada. Pretend√≠a incluir clases, interfaces y tipos est√°ticos.</td></tr>
        <tr><td>ES5 (2009)</td><td>"use strict", m√©todos de array, soporte para JSON, control de propiedades de objetos.</td></tr>
        <tr><td>ES6 / ES2015</td><td>let, const, arrow functions, clases, m√≥dulos, template strings, desestructuraci√≥n, promesas.</td></tr>
        <tr><td>ES7 / ES2016</td><td>Operador de exponenciaci√≥n (**), m√©todo includes() en arrays.</td></tr>
        <tr><td>ES8 / ES2017</td><td>Async/await, Object.values(), padStart(), padEnd().</td></tr>
        <tr><td>ES9 / ES2018</td><td>Spread/rest en objetos, for await...of, Promise.finally().</td></tr>
        <tr><td>ES10 / ES2019</td><td>Array.flat(), flatMap(), Object.fromEntries(), trimStart/trimEnd.</td></tr>
        <tr><td>ES11 / ES2020</td><td>BigInt, encadenamiento opcional (?.), coalescencia nula (??), Promise.allSettled().</td></tr>
        <tr><td>ES12 / ES2021</td><td>Operadores l√≥gicos de asignaci√≥n, separadores num√©ricos, replaceAll().</td></tr>
        <tr><td>ES13 / ES2022</td><td>Campos privados en clases, m√©todos est√°ticos privados, Error.cause.</td></tr>
        <tr><td>ES14 / ES2023</td><td>findLast(), findLastIndex(), mejoras en Symbol y clases privadas.</td></tr>
        <tr><td>ES15 / ES2024</td><td>Mejoras de rendimiento, propuestas como do expressions y await avanzado (en evoluci√≥n).</td></tr>
      </tbody>
    </table>
  </div>

</body>
</html>


CSS:

/* styles.css */

body {
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  margin: 0;
  padding: 20px;
  background: #f9f9f9;
}

h1 {
  text-align: center;
  color: #333;
}

.table-container {
  overflow-x: auto;
}

table {
  width: 100%;
  border-collapse: collapse;
  margin-top: 20px;
  background-color: #fff;
  box-shadow: 0 0 10px rgba(0,0,0,0.05);
}

th, td {
  padding: 16px;
  text-align: left;
  border-bottom: 1px solid #ddd;
}

th {
  background-color: #007BFF;
  color: #fff;
  position: sticky;
  top: 0;
  z-index: 1;
}

tr:hover {
  background-color: #f1f1f1;
}

@media (max-width: 600px) {
  th, td {
    padding: 12px;
    font-size: 14px;
  }
}
